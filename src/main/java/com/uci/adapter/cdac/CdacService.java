package com.uci.adapter.cdac;

import messagerosa.core.model.XMessage;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import javax.net.ssl.SSLContext;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.KeyManagementException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

@Service
public class CdacService {

//    @Value("${cdac.base.url}")
//    private String baseUrl;

//    public Mono<String> callOutBoundAPI(XMessage nextMsg) {
//        String phoneNo = nextMsg.getTo().getUserID();
//        String message = nextMsg.getPayload().getText();
//        message = message.trim();
//        StringBuilder finalmessage = new StringBuilder(message);
//        String templateId = nextMsg.getTransformers().get(0).getMetaData().get("templateId");
//        return WebClient.builder()
//                .baseUrl(baseUrl)
//                .build()
//                .get()
//                .uri(builder -> builder.path("/api/send_unicode_sms/")
//                        .queryParam("message", finalmessage)
//                        .queryParam("mobileNumber", phoneNo)
//                        .queryParam("templateid", templateId).build())
//                .retrieve()
//                .bodyToMono(String.class)
//                .map(new Function<String, String>() {
//                    @Override
//                    public String apply(String response) {
//                        if (response != null && response.startsWith("402")) {
//                            return response;
//                        } else{
//                            return null;
//                        }
//                    }
//                });
//    }

    /**
     * Send Unicode text SMS
     * @param username : Department Login User Name
     * @param password : Department Login Password
     * @param message  : Unicode Message e.g. 'à¤µà¤¿à¤à¤¾à¤¸ à¤à¤£à¤¿ à¤ªà¥à¤°à¤à¤¤ à¤¸à¤à¤à¤£à¤¨ à¤à¥à¤à¤¦à¥à¤° à¤®à¤§à¥à¤¯à¥ à¤¸à¥à¤µà¤¾à¤à¤¤ à¤à¤¹à¥'
     * @param senderId	: Department allocated SenderID
     * @param mobileNumber : Bulk Mobile Number with comma separated e.g. '99XXXXXXX,99XXXXXXXX'
     * @param secureKey :  Department key generated by login to services portal
     * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms'
     * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
     *
     * @param templateid :  templateId unique for each template message content
     */
    public String sendUnicodeSMS(String username, String password, String message, String senderId, String mobileNumber, String secureKey, String templateid){
        String finalmessage = "";
        for(int i = 0 ; i< message.length();i++){
            char ch = message.charAt(i);
            int j = (int) ch;
            String sss = "&#"+j+";";
            finalmessage = finalmessage + sss;
        }

        String responseString = "";
        SSLSocketFactory sf=null;
        SSLContext context=null;
        String encryptedPassword;
        try {
            //context=SSLContext.getInstance("TLSv1.1"); // Use this line for Java version 6
            context=SSLContext.getInstance("TLSv1.2"); // Use this line for Java version 7 and above
            context.init(null, null, null);
            sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
            Scheme scheme=new Scheme("https",443,sf);
            HttpClient client=new DefaultHttpClient();
            client.getConnectionManager().getSchemeRegistry().register(scheme);
            HttpPost post=new HttpPost("https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT");
            encryptedPassword  = MD5(password);
            String generatedKey = hashGenerator(username, senderId, finalmessage, secureKey);
            List<BasicNameValuePair> nameValuePairs=new ArrayList<>(1);
            nameValuePairs.add(new BasicNameValuePair("bulkmobno", mobileNumber));
            nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
            nameValuePairs.add(new BasicNameValuePair("content", finalmessage));
            nameValuePairs.add(new BasicNameValuePair("smsservicetype", "unicodemsg"));
            nameValuePairs.add(new BasicNameValuePair("username", username));
            nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
            nameValuePairs.add(new BasicNameValuePair("key", generatedKey));
            nameValuePairs.add(new BasicNameValuePair("templateid", templateid));
            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));

            HttpResponse response=client.execute(post);
            BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
            String line="";
            while((line=bf.readLine())!=null){
                responseString = responseString+line;
            }
            System.out.println("CDAC Service sendUnicodeSMS response: "+responseString);
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (KeyManagementException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return responseString;
    }

    protected static String hashGenerator(String userName, String senderId, String content, String secureKey) {
        // TODO Auto-generated method stub
        StringBuffer finalString=new StringBuffer();
        finalString.append(userName.trim()).append(senderId.trim()).append(content.trim()).append(secureKey.trim());
        String hashGen=finalString.toString();
        StringBuffer sb = null;
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-512");
            md.update(hashGen.getBytes());
            byte byteData[] = md.digest();
            //convert the byte to hex format method 1
            sb = new StringBuffer();
            for (int i = 0; i < byteData.length; i++) {
                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return sb.toString();
    }

    /****
     * Method  to convert Normal Plain Text Password to MD5 encrypted password
     ***/
    private static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance("SHA-1");
        byte[] md5 = new byte[64];
        md.update(text.getBytes("iso-8859-1"), 0, text.length());
        md5 = md.digest();
        return convertedToHex(md5);
    }

    private static String convertedToHex(byte[] data) {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < data.length; i++) {
            int halfOfByte = (data[i] >>> 4) & 0x0F;
            int twoHalfBytes = 0;
            do {
                if ((0 <= halfOfByte) && (halfOfByte <= 9)) {
                    buf.append( (char) ('0' + halfOfByte) );
                }
                else {
                    buf.append( (char) ('a' + (halfOfByte - 10)) );
                }
                halfOfByte = data[i] & 0x0F;
            } while(twoHalfBytes++ < 1);
        }
        return buf.toString();
    }
}
